#!/usr/bin/env dash
#
# Description
#   aliases to my magic's system
#
# by BeyondMagic - 2021


#--------------------------------------------------------------------------------
# Enviroment Variables
#--------------------------------------------------------------------------------


export LIMIT_WALLPAPERS=50
export EDITOR=nvim VISUAL=nvim


#--------------------------------------------------------------------------------
# Aliases
#--------------------------------------------------------------------------------

alias     mkdir='mkdir -p'
alias      iris='~/Git/Projects/iris-cli/iris/bin/iris'
alias      game="PROTON_NO_ESYNC=1 PROTON_DUMP_DEBUG_COMMANDS=1 STEAM_COMPAT_DATA_PATH=$HOME/.config/proton/ proton run"
alias   f_cache='SOURCE_DATE_EPOCH=$(date +%s) doas -- fc-cache -rs' # Temporary solution to fc-cache failing
alias        ls='exa'
alias   new_key="xbindkeys -f $HOME/.config/xbindkeys/xbindkeysrc -mk"
alias    pacman='doas -- pacman'
alias        ..='cd ..'
alias      ....='cd ../..'
alias        lu='ls -la --color=always'
alias      wget="wget --hsts-file '$HOME/.config/wget/wget-history'"
alias      grep='grep --colour'
alias     links="v $HOME/Library/links.json"
alias    quotes="v $HOME/Library/quotes.json"
alias favorites="v $HOME/Library/favorites.json"
alias   frasial="v $HOME/Library/parafrasial.json"
alias     build='doas -- make clean install'
alias upendrive='doas -- umount /mnt/pendrive'
alias        cpv='cpv -g' # Patch for cp by jarun https://github.com/jarun/advcpmv
alias        mvv='mvv -g' # Patch for mv by jarun https://github.com/jarun/advcpmv
alias       wiki="v $HOME/git/config/README.md"
alias  seeimages='nsxiv * & disown'
alias  processes='ps fux -u iris'
alias      c++20='g++ -c -fmodules-ts -std=c++20'
alias     nincat="NINCAT_ROOT=$HOME/Git/Projects/ninecath/nincat dash $HOME/Git/Projects/ninecath/nincat/nincat"
alias        dev='./make.sh'

#--------------------------------------------------------------------------------
# Functions
#--------------------------------------------------------------------------------


# Load pendrive
pendrive() {
  doas -- mount -o umask=0,uid=nobody,gid=nobody "$1" /mnt/pendrive && cd /mnt/pendrive && n
}

# Find cover images from Google (opening a new tab on your browser)
findimage() {

  $BROWSER "https://www.google.com/search?as_st=y&tbm=isch&hl=en-GB&as_q=$@ cover&as_epq=&as_oq=&as_eq=&cr=&as_sitesearch=&safe=images&tbs=iar:s"

}

# Use YT-DLP with normal format.
dlp () {

  yt-dlp $@ -o "%(id)s.%(ext)s"

}

# Get key_s name for dwm
get_keyname() {

  xev | awk -F'[ )]+' '/^KeyPress/ { a[NR+2] } NR in a { printf "%-3s %s\n", $5, $8 }'

}

# Add cover from an image file to a song
coverfrom() {

  ffmpeg -i "$2" -i "$1" -map 0:0 -map 1:0 -c copy -id3v2_version 3 \
    -metadata:s:v title='Album cover' \
    -metadata:s:v comment='Cover (front)' \
    new-"$2"

}

# Grep recursively on the current directory with the match.
find_here () {

  grep -r $@ *

}

# Run todoncli
tdtd() {

  current_dir="$PWD"
  cd "$HOME/Git/Contributing/tdtd" && node todoncli.js
  cd "$current_dir"

}

# Function to transform clipboard into an image
topng() {

  all="$@"

  xclip -selection clipboard -t image/png -o > "$all.png"

}

# Download from Youtube and transform in mp3
tomp3() {

  youtube-dl -o '~/Library/novo/%(title)s.%(ext)s' \
    --add-metadata \
    --metadata-from-title "(?P<artist>.+?) - (?P<title>.+)" \
    -x -i -f bestaudio "$1"

}

# Download my music
mdemonde() {

  . ~/Library/accounts.zsh

  youtube-dl -o "$HOME/Library/Music/Songs/%(title)s.%(ext)s" \
    --download-archive "$HOME/Library/Music/yt_archive.txt" --add-metadata \
    --metadata-from-title "(?P<artist>.+?) - (?P<title>.+)" \
    --playlist-end 50 -x -i \
    -f bestaudio "https://www.youtube.com/playlist?list=$all_music_yt_playlist"
  mpc update --wait

}


# Run nvim :Z
v() {
  nvim "$@"
}

# Run nvim with the last session :Z
vs() {
  nvim -S ~/.config/nvim/session.vim "$@"
}

# Run ncmpcpp :|
song() {
  ncmpcpp -c "$HOME/.config/ncmpcpp/config" --ignore-config-errors
}


# List files 
la() {
  ls -lAfh $@
}

# List only dots
ldot() {
  ls -ld .* $@
}

# Copy content of a file
copypaste() {
  xclip -sel c < "$1"
}

update_nincat() {

	makepkg -si \
		&& makepkg --printsrcinfo > .SRCINFO \
		&& cp .SRCINFO PKGBUILD -t ~/Git/Projects/ninecath/nincat-aur \
		&& cd ~/Git/Projects/ninecath/nincat-aur \
		&& git add . \
		&& git commit \
		&& git push origin master \
		&& cd ~/Git/Projects/ninecath/nincat
}

# Get current PATH and copy it to system
cpdir() {
  printf "$PWD" | sed 's_/home/iris_$HOME_' | xclip -selection clipboard
}

# Run program and disown it easily
q() { "$@" & disown }
qq() { "$@" & disown; exit; }

# Clean lemonbar scripts
#   scripts (github.com/beyondMagic/scripts)
#clean_bars() {
  
#  pkill -9 -f "lemonbar -H "

#  pgrep -f "sh $HOME/git/scripts/bars/" | \
#    while read -r id; do
#      pkill -9 -P "$id"
#      kill -9 "$id"
#    done

#}

#   mpv see video
see() {
  exec mpv "$@" --save-position-on-quit --hwdec --vo=xv 
}

#   mpv see video from youtube
seeytb() {
  exec mpv "$@" --save-position-on-quit --hwdec --vo=xv --ytdl-format=best
}

#   mpv see video from youtube from medium quality
seeytm() {
  exec mpv "$@" --save-position-on-quit --hwdec --vo=xv --ytdl-format=18
}

up_dunst() {

  kill -9 $(pidof dunst)

  export \
                  font="$(xgetres dunst.font)" \
                 width="$(xgetres dunst.geometry.width)" \
                height="$(xgetres dunst.geometry.height)" \
                     x="$(xgetres dunst.geometry.x)" \
                     y="$(xgetres dunst.geometry.y)" \
      separator_height="$(xgetres dunst.separator_height)" \
      separator_colour="$(xgetres dunst.separator.colour )" \
               padding="$(xgetres dunst.padding)" \
    horizontal_padding="$(xgetres dunst.horizontal_padding)" \
         max_icon_size="$(xgetres dunst.max_icon_size)" \
           frame_width="$(xgetres dunst.frame_width)" \
        low_background="$(xgetres dunst.low.background)" \
        low_foreground="$(xgetres dunst.low.foreground)" \
       low_frame_color="$(xgetres dunst.low.frame_colour)" \
     normal_background="$(xgetres dunst.normal.background)" \
     normal_foreground="$(xgetres dunst.normal.foreground)" \
    normal_frame_color="$(xgetres dunst.normal.frame_colour)" \
   critical_background="$(xgetres dunst.critical.background)" \
   critical_foreground="$(xgetres dunst.critical.foreground)" \
  critical_frame_color="$(xgetres dunst.critical.frame_colour)"

  envsubst < "$HOME/.config/dunst/dunstrc.template" > "$HOME/.config/dunst/dunstrc"

  dunst -s -follow keyboard & disown

}

up_gtk() {

  export \
    gtk_cursor="$(xgetres Xcursor.theme)" \
     gtk_theme="$(xgetres theme.gtk.theme)" \
      gtk_icon="$(xgetres theme.gtk.icon)"

  envsubst < "$HOME/.config/xsettingsd/xsettingsrc.template" > "$HOME/.config/xsettingsd/xsettingsdrc"

  gsettings set org.gnome.desktop.interface gtk-theme "$gtk_theme"
  gsettings set org.gnome.desktop.interface cursor-theme "$gtk_cursor"
  gsettings set org.gnome.desktop.interface icon-theme "$gtk_icon"
 
  pkill -f xsettingsd
  xsettingsd -c "$HOME/.config/xsettingsd/xsettingsdrc" & disown
}

up_zathura() {

  # No live reload for zathura, nor hacks, no idea...
  #kill -9 zathurja
  
  export \
              adjust_open="$(xgetres zathura.adjust-open)" \
                  recolor="$(xgetres zathura.recolor)" \
           title_basename="$(xgetres zathura.title.basename)" \
      selection_clipboard="$(xgetres zathura.selection.clipboard)" \
                   render="$(xgetres zathura.render)" \
    notification_error_bg="$(xgetres zathura.notification.error.bg)" \
    notification_error_fg="$(xgetres zathura.notification.error.fg)" \
  notification_warning_bg="$(xgetres zathura.notification.warning.bg)" \
  notification_warning_fg="$(xgetres zathura.notification.warning.fg)" \
          notification_bg="$(xgetres zathura.notification.bg)" \
          notification_fg="$(xgetres zathura.notification.fg)" \
            completion_bg="$(xgetres zathura.completion.bg)" \
            completion_fg="$(xgetres zathura.completion.fg)" \
      completion_group_bg="$(xgetres zathura.completion.group.bg)" \
      completion_group_fg="$(xgetres zathura.completion.group.fg)" \
  completion_highlight_bg="$(xgetres zathura.completion.highlight.bg)" \
  completion_highlight_fg="$(xgetres zathura.completion.highlight.fg)" \
                 index_bg="$(xgetres zathura.index.bg)" \
                 index_fg="$(xgetres zathura.index.fg)" \
          index_active_bg="$(xgetres zathura.index.active.bg)" \
          index_active_fg="$(xgetres zathura.index.active.fg)" \
                 input_bg="$(xgetres zathura.input.bg)" \
                 input_fg="$(xgetres zathura.input.fg)" \
                status_bg="$(xgetres zathura.status.bg)" \
                status_fg="$(xgetres zathura.status.fg)" \
             highlight_fg="$(xgetres zathura.highlight.active.fg)" \
      highlight_active_fg="$(xgetres zathura.highlight.fg)" \
               default_bg="$(xgetres zathura.default.bg)" \
               default_fg="$(xgetres zathura.default.fg)" \
                render_bg="$(xgetres zathura.render.bg)" \
                render_fg="$(xgetres zathura.render.fg)" \
               zathura_bg="$(xgetres zathura.bg)" \
               zathura_fg="$(xgetres zathura.fg)"

  envsubst < "$HOME/.config/zathura/zathurarc.template" > "$HOME/.config/zathura/zathurarc"

}

# Update XResources and apps
up_xr() {

  [ "$1" ] || exit

  # Old xtheme type.
  xtheme_file="$HOME/.config/xorg/theme-linked/theme.x"
  old_xtheme=$(grep -oP "theme\.type[ ]*:[ ]*\K.*" "$xtheme_file")

  # Change theme by name
  ln -sf /home/iris/.config/xorg/themes/"$1"/* /home/iris/.config/xorg/theme-linked/

  # Load XResources
  xrdb ~/.config/xorg/XResources

  # Update Apps despite type of the theme
  {
    pkill -URG 'xnotify'
    kill -USR1 $(pidof flarity)

    # Dunst
    up_dunst

    # zathura
    up_zathura

    # gtk server
    #up_gtk
  
  }

  # Update apps with different type of the theme
  [ "$(grep -oP "theme\.type[ ]*:[ ]*\K.*" "$xtheme_file")" != "$old_xtheme" ] && {
 
    # NVim
    {
      theme_file_lua="$HOME/.config/nvim/lua/options.lua"
      now_nvim_theme="$(grep -oP "background',[ ]'\K.*" "$theme_file_lua" | sed "s/')//")"

      [ "$now_nvim_theme" = 'dark' ] \
        && sed -i "s/^option('background',.*/option('background', 'light')/" "$theme_file_lua"

      [ "$now_nvim_theme" = 'light' ] \
        && sed -i "s/^option('background',.*/option('background', 'dark')/" "$theme_file_lua"

    }

    kill -USR1 $(pidof nvim)

  }

}

# Load a song that you found from a playlist
find_song() {

  # query get by dmenu
  query="$(printf '' | dmenu -p "Find a song:")"

  # if empty doesn't continue
  [ "$query" ] || exit 1

  # select all songs that it finds
  song_found="$(mpc search any "$query")"

  # if it doesn't find any song
  [ "$song_found" ] || exit 1

  # add songs
  song_found="$(echo "$song_found" | dmenu -i -l 10 -r )"

  # only continue if it did find songs
  [ "$song_found" ] || exit 1
  
  # last position to start counting from now (in case of multiple songs)
  position_last=$(mpc playlist | wc -l)

  # loop through all the songs to add it to mpd
  echo "$song_found" | \
    while IFS="" read -r song_path || [ -n "$song_path" ]; do
    mpc add "$song_path"
  done

  # start from the first song added
  mpc play $((position_last + 1))

}

# See all fonts and display
see_fonts() {

  font_chosen="$(fc-list | dmenu -l 20 -i -r -p 'Display font:')"

  [ "$font_chosen" = "" ] || {

    nohup display "$(echo "$font_chosen" | sed -r 's/:.+//g')" >/dev/null 2>&1 &
    echo "$font_chosen"

  }

}

# Delete current song of mpd
del_cursong() {

  # A direct call :)
  mpc del $(mpc playlist | grep -n "$(mpc current)" | cut -d : -f 1)

}

# nnn with cd on exit
n() {

  # Config.
  export NNN_PLUG='p:preview-tabbed'

  # Block nesting of nnn in subshells
  [ -n $NNNLVL ] && [ "${NNNLVL:-0}" -ge 1 ] && {
    echo "nnn is already running"
    return
  }

  # The default behaviour is to cd on quit (nnn checks if NNN_TMPFILE is set)
  # To cd on quit only on ^G, remove the "export" as in:
  #     NNN_TMPFILE="${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.lastd"
  # NOTE: NNN_TMPFILE is fixed, should not be modified
  export NNN_TMPFILE="${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.lastd"

  # Unmask ^Q (, ^V etc.) (if required, see `stty -a`) to Quit nnn
  # stty start undef
  # stty stop undef
  # stty lwrap undef
  # stty lnext undef

  [ "$@" ] && cd "$@"
  nnn -adDoxR -T t "$@"

  [ -f "$NNN_TMPFILE" ] && {
    . "$NNN_TMPFILE"
    rm -f "$NNN_TMPFILE" > /dev/null
  }
}

# tuxi
#   Translate is simply to find the translation of something in English
translate() {

  result=$(LANG="en_US" tuxi -trq "tuxi_trans $@ in english")
  notify-send "'$@' in English is '$result.'"
  echo "$result"

}

#   Meaning is just to find the meaning of a word or kanji.
meaning() {

  result=$(LANG="en_US" tuxi -trq "tuxi_define $@ meaning")
  notify-send "The meaning of '$@' in English is '$result.'"
  echo "$result"

}


#   Config of Mozc
mozc_config() {

  /usr/lib/mozc/mozc_tool --mode=config_dialog

}


#   Mozc Handwriting
mozc_handwriting() {

  /usr/lib/mozc/mozc_tool --mode=hand_writing

}

# Rick roll in terminal :)
rickrollrc() {

  curl -s -L https://raw.githubusercontent.com/keroserene/rickrollrc/master/roll.sh | bash

}


# Get current weather (Brazil)
#   TODO
#weather() {

  #source "`ueberzug library`"

  #tmp_top="/tmp/top_weather.gif"
  #tmp_bot="/tmp/bot_weather.gif"

  #while :; do

#    curl -S https://cdn.star.nesdis.noaa.gov/GOES16/ABI/SECTOR/ssa/Sandwich/GOES16-SSA-Sandwich-900x540.gif -o "$tmp_top"
#    curl -S https://cdn.star.nesdis.noaa.gov/GOES16/ABI/SECTOR/nsa/Sandwich/GOES16-NSA-Sandwich-900x540.gif -o "$tmp_bot"

    # load gifs in terminal
    #ImageLayer 0< <(
      #ImageLayer::add [identifier]="example0" [path]="$tmp_top" [x]="11" [y]="11" [max_width]="900" [max_height]="540" 
      #read
    #)

    #sleep 600

  #done

#}

wallpaper() {

  # If there's a wallpaper, then set it
  [ -f "$1" ] && {

    # Wallpaper to set
    clean_wallpaper="$(echo "$1" | sed 's/^- File: //')"

    # Set wallpaper with feh
    xwallpaper --stretch "$clean_wallpaper"

    # Get how many lines our temp file has
    total_lines_temp=$(cat "$XWALLPAPER_HISTORY" | wc -l)

    # Verify how many wallpapers we saved already - limit: 50
    [ $total_lines_temp -ge $LIMIT_WALLPAPERS ] && {

        # Get limit to delete
        limit_deletion=$(($total_lines_temp - $LIMIT_WALLPAPERS + 1))

        sed -i "1,${limit_deletion}d" "$XWALLPAPER_HISTORY"

    }

    # Add new's wallpaper's path to temp file
    path_wallpaper="$(readlink -f "$clean_wallpaper")"
    echo "$path_wallpaper" >> "$XWALLPAPER_HISTORY"

    # Create symlink to wallpaper.
    ln -sf "$path_wallpaper" "$HOME/.cache/xcurrent_wallpaper"

  }

}

random_wallpaper() {

  [ "$1" = 'sddm' ] && {

    # This will get a new random wallpaper based on a directory
    new_wallpaper="$(find "$XWALLPAPERS_FOLDER/sddm/" -type f -size +0 | shuf -n 1)"

    # This will create a link to the sddm theme wallpaper
    cp -rf "$new_wallpaper" /usr/share/sddm/themes/sugar-candy/Backgrounds/auto

    # Force new link to startpage
    #   github.com/beyondmagic/mod-startpage
    ln -sf "$new_wallpaper" ~/git/Projects/startpage/data/background

  } || {

    # This will get a new random wallpaper based on a directory
    new_wallpaper="$(find "$XWALLPAPERS_FOLDER/$(xgetres theme.type)" -type f -size +0 | shuf -n 1)"

    # This will just set it
    wallpaper "$new_wallpaper"

  }

}

set_wallpaper() {

  # Set wallpaper chosen by user
  wallpaper "$(find "$XWALLPAPERS_FOLDER/$(xgetres theme.type)" -type f -size +0 | nsxiv -itob | tail -n1)"

}

delete_wallpaper() {

  # Get latest wallpaper of path
  latest_wallpaper=$(cat "$XWALLPAPER_HISTORY" | tail -n1)

	# Move wallpaper file to trash
	mv "$latest_wallpaper" "$TRASH"

  # Delete all wallpapers entries from history
	sed -i "s*$latest_wallpaper**gm" "$XWALLPAPER_HISTORY"

	# Select wallpaper before that, or if there isn't any, then set a random
	previous_wallpaper || random_wallpaper

}

to_gif() {

  palette="/tmp/palette.png"
  filters="fps=25,scale=500:-1:flags=lanczos"

  ffmpeg -i "$1" -vf "$filters,palettegen" -y $palette
  ffmpeg -i "$1" -i $palette -lavfi "$filters [x]; [x][1:v] paletteuse" -y "$1".gif

}

previous_wallpaper() {

  # Remove last line of the file
  sed -i '$d' "$XWALLPAPER_HISTORY"

  # Get latest wallpaper of path
  latest_wallpaper=$(cat "$XWALLPAPER_HISTORY" | tail -n1)
  
  # Verify if there's a latest wallpaper
  [ -f "$latest_wallpaper" ] && {

    # Set wallpaper with xwallpaper
    wallpaper "$latest_wallpaper"
  
  # If there's not a wallpaper, then just set a random
  } || random_wallpaper

}
